$PBExportHeader$gf_imagetopdf.srf
global type gf_imagetopdf from function_object
end type

forward prototypes
global function string gf_imagetopdf (string as_image)
end prototypes

global function string gf_imagetopdf (string as_image);String ls_pdf, ls_format
PDFdocument lpdf_doc
PDFpage lpdf_page
PDFImage lpdf_image
Long ll_rtn

ls_format = lower(mid(as_image, LastPos(as_image, "."),  4))

ls_pdf = replace(as_image, pos(as_image, ls_format), 4, ".pdf")
	
IF FileExists(ls_pdf) THEN FileDelete(ls_pdf)
	
lpdf_page = Create PDFpage
lpdf_image = Create PDFImage
lpdf_doc = Create PDFdocument
	
//Creamos la Imagen en el Objeto PdfImage
lpdf_image.filename = as_image
lpdf_image.x=0
lpdf_image.y=0
lpdf_image.height=842 //A4 height
lpdf_image.width=595 //A4 Width
lpdf_image.FitMethod = PDFImageFitmethod_Meet!
		
//Añadimos la Imagen Creada al Objeto PdfPage
ll_rtn = lpdf_page.addcontent( lpdf_image)

IF ll_rtn <> 1 THEN
	Messagebox("Error", "Error inserting image", Exclamation!)
	RETURN ""
END IF	
	
//Importamos la Pagina con la Imagen al Objeto PDFDocument en la primera poicion
ll_rtn = lpdf_doc.InsertPage(lpdf_page, 1)

IF ll_rtn <> 1 THEN
	Messagebox("Error", "Error inserting page", Exclamation!)
	RETURN ""
END IF	

ll_rtn = lpdf_doc.save(ls_pdf)

IF ll_rtn <> 1 THEN
	Messagebox("Error", "Error saving pdf", Exclamation!)
	RETURN ""
END IF	

IF NOT FileDelete(as_image) THEN
	Messagebox("Error", "Error deleting image", Exclamation!)
	RETURN ""
END IF	
	
DESTROY  lpdf_page 
DESTROY lpdf_image
DESTROY lpdf_doc
end function

